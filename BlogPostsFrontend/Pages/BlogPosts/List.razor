@page "/user/blogs"
@inject ISessionStorageService  _sessionStorage
@inject BlogPostService _blogPostService;
@inject NavigationManager _navigationManager
@inject ToastService _toastService

<div class="row pb-3 pt-3">
    <div class="col-12">
        <div class="card scrollable-card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-blog mr-2" />
                </h3>
                <div class="card-tools float-left">
                    <div class="input-group input-group-sm" style="width: 150px;">
                        <input @bind="searchValue" @bind:event="oninput" @onkeyup="SearchBlogPosts" placeholder="Search" class="form-control float-right">
                        @*<input type="text" name="table_search" class="form-control float-right" placeholder="Search">*@
                        <div class="input-group-append">
                            <button type="submit" class="btn btn-default">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="card-tools">
                    <div class="btn-group">
                        <button type="button" class="btn btn-tool" data-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-ellipsis-h text-lg"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-right" role="menu" style="">
                            <a href="user/blogs/write" class="dropdown-item">
                                <i class="fas fa-edit mr-2"></i>
                                <span>Write Blog</span>
                            </a>
                            <div class="dropdown-divider"></div>
                            <a href="javascript:void(0);" @onclick="ImportBlogBosts" class="dropdown-item">
                                <i class="fas fa-download mr-2"></i>
                                <span>Import Blogs</span>
                            </a>
                        </div>
                    </div>

                    <a href="/" class="btn btn-tool">
                        <i class="fas fa-times"></i>
                    </a>
                </div>
            </div>
            <!-- /.card-header -->
            <div class="card-body p-0">
                <div class="scrollable-content p-0">
                    <ul class="products-list product-list-in-card pl-2 pr-2">
                        @foreach (var blogPost in blogPosts)
                        {
                            <li class="item">
                                <div class="product-img">
                                    <img src="/dist/img/imageplaceholder.jpg" alt="BlogPost Image" class="img-size-50">
                                </div>
                                <div class="product-info">
                                    <div>
                                        <span class="text-justify">
                                            <a href="blogs/read/@blogPost.Id" class="product-title">
                                                @blogPost.Title
                                            </a>
                                        </span>

                                        <div class="btn-group float-right mt-1">
                                            <button type="button" class="btn btn-tool" data-toggle="dropdown" aria-expanded="false">
                                                <i class="fas fa-ellipsis-h text-lg"></i>
                                            </button>
                                            <div class="dropdown-menu dropdown-menu-right" role="menu" style="">
                                                <a href="blogs/read/@blogPost.Id" class="dropdown-item">
                                                    <i class="fas fa-eye mr-2"></i>
                                                    <span>View Blog</span>
                                                </a>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="truncate-ellipsis">
                                        <span class="product-description">
                                            <span>Published: <b>@string.Format("{0:dd-MMM-yyyy at HH:mm tt}", blogPost.PublicationDate)</b></span>
                                        </span>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <!-- /.card-body -->
            @if (loading)
            {
                <div class="overlay lightblue"><i class="fas fa-2x fa-sync-alt fa-spin"></i></div>
            }

            <div class="card-footer">
                <div class="">
                    <span class="description-percentage">
                        <i class="fas fa-blog"></i>
                        <span id="date_filter">
                            Total: <b>@blogPosts.Count</b>
                        </span>
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string searchValue;
    private bool loading = true;
    CurrentUser loggedInUser = new();
    List<BlogPost> allBlogPosts = new();
    List<BlogPost> blogPosts = new();

    protected override async Task OnInitializedAsync()
    {
        var user = await _sessionStorage.GetItemAsync<CurrentUser>(StorageConstants.StoredUser);
        if (user != null)
        {
            loggedInUser = user;
        }

        loading = true;

        try
        {
            Task t1 = Task.Run(() => ListBlogPosts());

            await Task.WhenAll(t1);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ListBlogPosts()
    {
        BlogPostHttpResult blogHttpResult = await _blogPostService.ListForUserAsync(loggedInUser.UserId);

        if (blogHttpResult.Success)
        {
            allBlogPosts = blogHttpResult.BlogPosts;
            blogPosts = allBlogPosts;
        }
        else
            await _toastService.ShowToastAsync(blogHttpResult.Message, ToastType.Error);
    }

    public async Task ImportBlogBosts()
    {
        loading = true;

        BlogPostHttpResult blogHttpResult = await _blogPostService.ImportBlogPostsAsync(loggedInUser.UserId);

        if (blogHttpResult.Success)
        {
            if(blogHttpResult.BlogPosts.Count > 0)
                await _toastService.ShowToastAsync($"{blogHttpResult.BlogPosts.Count} blog post(s) imported successfully.", ToastType.Success);
            else
                await _toastService.ShowToastAsync($"No new blog posts to import were found. Please try again later.", ToastType.Warning);

            allBlogPosts.AddRange(blogHttpResult.BlogPosts);
            blogPosts = allBlogPosts;
        }
        else
            await _toastService.ShowToastAsync(blogHttpResult.Message, ToastType.Error);

        loading = false;
    }

    private void SearchBlogPosts()
    {
        if (string.IsNullOrEmpty(searchValue))
            blogPosts = allBlogPosts;
        else
        {
            searchValue = searchValue.ToLower();
            var result = allBlogPosts.Where(n =>
            n.Title.ToLower().Contains(searchValue) ||
            n.Description.ToLower().Contains(searchValue)).ToList();

            if (result != null)
                blogPosts = result;
        }
    }
}
